openapi: 3.0.0
info:
  title: Blog Service
  description: 'Blog Service REST API'
  contact:
    email: anastasiia.hudyma.knm.2019@lpnu.ua
  version: 1.0.0
servers:
- url: https://blog.swagger.io/v2
- url: http://blog.swagger.io/v2
tags:
- name: article
  description: Operations about articles
- name: user
  description: Operations about user
- name: blog service
  description: Lists of articles





paths:
  /article:
    post:
      tags:
      - article
      summary: Adds the article
      operationId: addArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - blog_auth:
        - moderator
        - user
      x-codegen-request-body-name: body
    get:
      tags:
      - article
      summary: Information about all articles
      operationId: uodateArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description:  successful operation
          content: {}
        404:
          description: Articles not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - blog_auth:
        - moderator
        - user
      x-codegen-request-body-name: body
  /article/{article_ID}:
    get:
      tags:
      - article
      summary: Shows the published article
      description: Returns an article
      operationId: showArticle
      parameters:
      - name: article_ID
        in: path
        description: ID of the article to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Articlenot found
          content: {}
    delete:
      tags:
      - article
      summary: Deletes the article
      operationId: deleteArticle
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: article_ID
        in: path
        description: Article ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Article not found
          content: {}
      security:
      - blog_auth:
        - moderator
    put:
      tags:
        - article
      summary: Updates the article
      operationId: confirmChangeedArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: successful operation
          content: { }
        404:
          description: Article not found
          content: { }
        405:
          description: Validation exception
          content: { }
      security:
        - blog_auth:
            - moderator
      x-codegen-request-body-name: body

  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/{username}:
    get:
      tags:
        - user
      summary: Shows the user
      operationId: showUser
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: { }
        404:
          description: User not found
          content: { }
    put:
      tags:
        - user
      summary: Updates the user
      description: This can only be done by the logged in user
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content: { }
        400:
          description: Invalid username supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - api_key: [ ]
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Deletes user
      description: This can only be done by the logged in user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content: { }
        400:
          description: Invalid username supplied
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - api_key: [ ]
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}


  /blog:
    get:
      tags:
      - blog service
      summary: Returns articles
      description: Returns a list of articles
      operationId: getListOfArticles
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  /blog/{username}:
    get:
      tags:
      - blog service
      summary: The list of user's articles
      description: Returns a list of articles
      operationId: getListOfUserArticles
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /blog/{article_ID}:
    get:
      tags:
      - blog service
      summary: Shows the history of the article
      description: Return published and edited by different users text of the article
      operationId: getHistoryOfArticle
      parameters:
      - name: article_ID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid article_ID supplied
          content: {}
        404:
          description: Article not found
          content: {}




components:
  schemas:
    Article:
      type: object
      required:
        - title
        - text
      properties:
        id:
          type: integer
          format: int64
        article_ID:
          type: integer
          format: int64
        title:
          type: string
        text:
          type: string
        status:
          type: string
          description: Article Status
          enum:
          - published
          - editting
          - consideration
        complete:
          type: boolean
          default: false
      xml:
        name: Article
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: string
          description: User Status
          enum:
          - registered
          - moderator
      xml:
        name: User
  securitySchemes:
    blog_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://blog.swagger.io/oauth/dialog
          scopes:
            moderator: modify articles in your account
            user: possibilities of registeredusers
    api_key:
      type: apiKey
      name: api_key
      in: header
